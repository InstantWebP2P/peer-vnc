#!/usr/bin/env node


//
// Please install node-httpp binary in your system exec dir, like /usr/bin/ or /usr/local/bin/
//

var argv = require('optimist').argv,
    Proxy = require('../index');

var help = [
    "usage: peer-vnc [options] ",
    "",
    "Starts a peer-vnc server using the specified command-line options",
    "",
    "options:",
    "  -t, --target     localhost:5900,localhost:5901-5918  Host:port pairs of VNC server, the multiple VNC separate by comma",
    "  -k, --key        User key                            Key for the registered user on ivncbox.com",
    "  -s  --secmode    ssl or acl                          Secure mode: ssl or host-based ACL",
    "  -a  --authmode   srv or both                         SSL auth mode: srv or both",
    "  -b  --basicauth  user:pass                           Http basic-auth as username:password",
    "  -d  --directory  /xxx/yy/                            File upload directory",
    "  -u, --user       USER                                User to drop privileges once server socket is bound",
    "  -h, --help                                           You're staring at it"
].join('\n');

if (argv.h || argv.help || Object.keys(argv).length === 2) {
  return console.log(help);
}

var target    = argv.t || argv.target,
    usrkey    = argv.k || argv.key,
    secmode   = argv.s || argv.secmode,
    authmode  = argv.a || argv.authmode,
    basicauth = argv.b || argv.basicauth,
    directory = argv.d || argv.directory,
    user      = argv.u || argv.user;

//
// Check target VNC server
//
var vncsrvs = [], options = {};

if (target) {
    var vncs = target.split(',');

    if (!Array.isArray(vncs)) vncs = [vncs];
        
    // normalize port range
    for (var idx = 0; idx < vncs.length; idx ++) {
        var vncstrs = vncs[idx].split(':');
        var vnchost = vncstrs[0];

        // support port range like localhost:5901-5910
        var port_range = [];
        if (vncstrs[1]) {
            var pstr = vncstrs[1].split('-');

            if (pstr.length > 1) {
                port_range.push(parseInt(pstr[0], 10));
                port_range.push(parseInt(pstr[1], 10));
            } else {
                port_range.push(parseInt(pstr[0], 10));
                port_range.push(parseInt(pstr[0], 10));
            }
        } else {
            port_range.push(5900);
            port_range.push(5900);
        }
        for (var vncport = port_range[0]; vncport <= port_range[1]; vncport ++) {
            vncsrvs.push(vnchost + ':' + vncport)
        }
    }   
} else {
    return console.log(help);
}

if (secmode) {
    options.secmode = secmode;
}

if (authmode) {
    options.sslmode = authmode;
}

if (basicauth) {
    options.auth = basicauth;
} else {
	console.log('Warning: Please set http auth with -b username:password');
}

if (directory) {
    options.upload = directory;
    console.log('Warning: File will upload to ' + directory);
}

if (usrkey) {
    options.usrkey = usrkey;
}

//
// Create the VNC client server with the specified options
//
var server = new Proxy(vncsrvs, function(err, proxyURL){
        console.log('VNC                            Proxy URL(please open it on browser)');
        for (var k in proxyURL) {
            console.log(k+'        '+proxyURL[k]);
        }
    }, options);

//
// Drop privileges if requested
//
if (typeof user === 'string') {
    process.setuid(user);
}


